generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  username       String    @unique
  fullName       String
  url            String?
  password       String?
  email          String?   @unique
  description    String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  lastActive     String?
  feed           Feed?
  followers      User[]    @relation("UserFollows")
  followingUsers User[]    @relation("UserFollows")
  posts          Post[]
  stories        Story[]
  chats          Chat[]    @relation("UserJoinsChat")
  messages       Message[] @relation("UserSendsMessage")
  likedPosts     Post[]    @relation("UserLikesPost")

  @@map("users")
}

model Feed {
  id      String  @id @default(cuid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique
  posts   Post[]
  stories Story[]
}

model Post {
  id                String   @id @default(cuid())
  description       String
  url               String
  published         Boolean  @default(false)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  author            User?    @relation(fields: [authorId], references: [id])
  authorId          String?
  feed              Feed?    @relation(fields: [feedId], references: [id])
  feedId            String?
  usersWhoHaveLiked User[]   @relation("UserLikesPost")
}

model Story {
  id        String   @id @default(cuid())
  name      String
  url       String
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  feed      Feed?    @relation(fields: [feedId], references: [id])
  feedId    String?
}

model Chat {
  id       String    @id @default(cuid())
  members  User[]    @relation("UserJoinsChat")
  messages Message[]
}

model Message {
  id       String @id @default(cuid())
  content  String
  sender   User   @relation("UserSendsMessage", fields: [senderId], references: [id])
  senderId String
  chat     Chat   @relation(fields: [chatId], references: [id])
  chatId   String
}
